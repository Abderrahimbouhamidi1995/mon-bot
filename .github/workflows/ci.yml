name: CI/CD for Rasa Bot with Docker Compose

on:
  push:
    branches:
      - test

jobs:
  build_and_test:
    name: Build Image and Run Tests
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}
          persist-credentials: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image (Test Stage)
        run: docker build --target test -t my-bot:test .

      - name: Run tests in Docker container
        run: docker run --rm -v ${{ github.workspace }}:/app -e PAT_TOKEN=${{ secrets.PAT_TOKEN }} my-bot:test      
      
      - name: Upload test results artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test_results
          path: tests/test_results.csv

      - name: Upload models artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: models
          path: models/
  rollback:
    name: Rollback Last Commit if Tests Fail
    runs-on: ubuntu-latest
    needs: build_and_test
    if: ${{ needs.build_and_test.outcome != 'success' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}
          persist-credentials: true
      
      - name: Download test results artifact
        uses: actions/download-artifact@v4
        with:
          name: test_results

      - name: Download test results artifact
        uses: actions/download-artifact@v4
        with:
          name: models
      
      - name: Rollback last commit
        run: |
          # echo "Listing files in tests directory:"; ls -la tests
          RESULT_FILE=$(find . -type f -name test_results.csv | head -n 1)
          # echo "Found test results file: $RESULT_FILE"
          git config --global user.email "a.bouhamidi@outlook.com"
          git config --global user.name "Abderrahimbouhamidi1995"
          if [ -n "$RESULT_FILE" ] && grep -Fq "Incorrect" "$RESULT_FILE"; then
            # BRANCH_NAME="test"
            # echo "Creating rollback branch: $BRANCH_NAME"
            # git checkout -b "$BRANCH_NAME"
            # echo "Rolling back last commit..."
            # git reset --hard HEAD~1
            echo "Merci de corriger les bugs detectés: "
            cat "$RESULT_FILE"
            echo "   "
            echo "Deleting last trained model from models directory...";
            MODEL_FILE=$(find . -type f -name '*.tar.gz' | sort -r | head -n 1);
            echo "Deleting model file: $MODEL_FILE";
            rm -f "$MODEL_FILE";
            git push origin HEAD --force
          else
            echo "Parfait. aucun bug n a été detecté: ";
            cat "$RESULT_FILE"
            echo "   "
            echo "Test results do NOT contain 'Incorrect'. Creating pull request to merge test branch into main...";
            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            echo "Current branch: $CURRENT_BRANCH"
            git add .
            git commit -m "Prepare PR merge"
            git fetch origin test
            NEW_SHA=$(git rev-parse origin/test)
            gh pr merge "$PR_OUTPUT" --merge --match-head-commit "$NEW_SHA"
            PR_OUTPUT=$(gh pr create --base main --head "$CURRENT_BRANCH" --title "Merge Test Branch into Main" --body "Automated merge from test branch because tests passed")
            echo "Pull request created: $PR_OUTPUT"
            gh pr merge "$PR_OUTPUT" --merge --match-head-commit "$(git rev-parse HEAD)"
          fi
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

  deploy:
    name: Deploy Rasa Bot Container
    runs-on: ubuntu-latest
    needs: build_and_test
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}
          persist-credentials: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image (Production Stage)
        run: docker build --target prod -t my-bot:prod .

      - name: Deploy Docker container
        run: docker run -d --rm -p 5011:5005 my-bot:prod